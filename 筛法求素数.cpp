
///////////////////////////////////////////////////////////////////////////////////
筛法时间复杂度为O(x*ln（lnx)）

用筛法求素数的基本思想是：把从1开始的、某一范围内的正整数从小到大顺序排列， 1不是素数，首先把它筛掉。剩下的数中选择最小的数是素数，然后去掉它的倍数。依次类推，直到筛子为空时结束。如有： 
1 2 3 4 5 6 7 8 9 10 
 11 12 13 14 15 16 17 18 19 20 
 21 22 23 24 25 26 27 28 29 30 
 1不是素数，去掉。剩下的数中2最小，是素数，去掉2的倍数，余下的数是： 
3 5 7 9 11 13 15 17 19 21 23 25 27 29 
剩下的数中3最小，是素数，去掉3的倍数，如此下去直到所有的数都被筛完，求出的素数为： 
2 3 5 7 11 13 17 19 23 29
///////////////////////////////////////////////////////////////////////////////////////
#include<stdio.h>
#include<string.h>
#include<math.h>
#define N 10000//N的大小可以根据需要变化
int a[N];//利用数组的下标记录要判断的数字
void sushu()
{

    memset(a,0,sizeof(a));//对数组a进行初始化为0，不是素数的标记为1，剩下为0的就是素数了
    a[1]=1;//1既不是素数也不是合数，先标记为1
    for(int i=2; i<=sqrt(N); i++)//降低时间复杂度 
    {	
        if(a[i]==0)//如果i是素数
        {
            for(int j=2; j*i<=N; j++) //循环标记的范围是i*j<N
            {
                a[i*j]=1;//如果i是素数，那么i*j肯定不是素数
            }
        }
    }//最终所有非素数都标记为1，素数都标记为0
    for(int i=2;i<=sqrt(N);i++)
    {
    	if(a[i]==0)
    	printf("%d  ",i);
	}
}
int main ()
{
	sushu();
	return 0; 
}

